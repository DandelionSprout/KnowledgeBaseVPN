"use strict";(self.webpackChunkadguard_vpn_knowledge_base=self.webpackChunkadguard_vpn_knowledge_base||[]).push([[115],{4137:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=s(n),u=l,c=k["".concat(o,".").concat(u)]||k[u]||d[u]||i;return n?a.createElement(c,r(r({ref:t},m),{},{components:n})):a.createElement(c,r({ref:t},m))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},7681:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return m},default:function(){return k}});var a=n(7462),l=n(3366),i=(n(7294),n(4137)),r=["components"],p={title:"DNS filtering rules syntax",sidebar_position:2},o=void 0,s={unversionedId:"general/dns-filtering-syntax",id:"general/dns-filtering-syntax",isDocsHomePage:!1,title:"DNS filtering rules syntax",description:"Introduction",source:"@site/docs/general/dns-filtering-syntax.md",sourceDirName:"general",slug:"/general/dns-filtering-syntax",permalink:"/KnowledgeBaseVPN/ru/general/dns-filtering-syntax",editUrl:"https://github.com/AdguardTeam/KnowledgeBaseVPN/edit/master/docs/general/dns-filtering-syntax.md",version:"current",sidebarPosition:2,frontMatter:{title:"DNS filtering rules syntax",sidebar_position:2},sidebar:"sidebar",previous:{title:"DNS filtering",permalink:"/KnowledgeBaseVPN/ru/general/dns-filtering"},next:{title:"Known DNS Providers",permalink:"/KnowledgeBaseVPN/ru/general/dns-providers"}},m=[{value:"Introduction",id:"introduction",children:[]},{value:"Basic Examples",id:"basic-examples",children:[]},{value:"Adblock-Style Syntax",id:"adblock-style-syntax",children:[{value:"Rule Modifiers",id:"rule-modifiers",children:[]}]},{value:"<code>/etc/hosts</code>-Style Syntax",id:"etc-hosts-syntax",children:[]},{value:"Domains-Only Syntax",id:"domains-only-syntax",children:[]},{value:"Hostlists Compiler",id:"hostlists-compiler",children:[]}],d={toc:m};function k(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"You can use AdGuard DNS filtering rules syntax to make the rules more flexible, so they can block content according to your preferences.\nAdGuard DNS filtering rules syntax can be used in different AdGuard products such as AdGuard Home, AdGuard DNS, AdGuard for Windows/Mac/Android."),(0,i.kt)("p",null,"There are three different approaches to writing hosts blocklists:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#adblock-style-syntax"},"Adblock-style syntax"),": the modern approach to writing\nfiltering rules based on using a subset of the Adblock-style rule syntax.\nThis way blocklists are compatible with browser ad blockers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#etc-hosts-syntax"},(0,i.kt)("inlineCode",{parentName:"a"},"/etc/hosts")," syntax"),": the old, tried-and-true approach that\nuses the same syntax that operating systems do for their hosts files.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"#domains-only-syntax"},"Domains-only syntax"),": a simple list of domain names."))),(0,i.kt)("p",null,"If you are creating a blocklist for AdGuard Home, we recommend using the\n",(0,i.kt)("a",{parentName:"p",href:"#adblock-style-syntax"},"Adblock-style syntax"),". It has a couple of important advantages\nover the old-style syntax:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Blocklists size."),"  Using pattern matching allows you to have a single\nrule instead of hundreds of ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," entries.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Compatibility."),"  Your blocklist will be compatible with browser ad\nblockers, and it will be easier to share rules with a browser filter list.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Extensibility."),"  For the last decade the Adblock-style syntax has greatly\nevolved, and we don't see why we can't extend it even more and provide\nadditional features for network-wide blockers."))),(0,i.kt)("p",null,"If you're maintaining an ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts"),"-style blocklist or if you maintain\nmultiple filter lists regardless of their type, we provide a tool that can be\nused to compile blocklists for AdGuard Home.  We called it ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AdguardTeam/HostlistCompiler"},"Hostlist\ncompiler")," and we use it ourselves to create ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AdguardTeam/AdGuardSDNSFilter"},"AdGuard DNS filter"),"."),(0,i.kt)("h2",{id:"basic-examples"},"Basic Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^"),": block access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," domain and all its\nsubdomains, like ",(0,i.kt)("inlineCode",{parentName:"p"},"www.example.org"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@||example.org^"),": unblock access to the ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," domain and all its\nsubdomains.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4 example.org"),": (attention, old ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts"),"-style syntax) respond\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4")," to queries for the ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," domain but ",(0,i.kt)("strong",{parentName:"p"},"not")," its\nsubdomains.  ",(0,i.kt)("inlineCode",{parentName:"p"},"www.example.org")," remains allowed."),(0,i.kt)("p",{parentName:"li"},"Using the unspecified IP address (",(0,i.kt)("inlineCode",{parentName:"p"},"0.0.0.0"),") or a local address (",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),"\nand alike) for a host is basically the same as blocking that host."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},"# Returns the IP address 1.2.3.4 for example.org.\n1.2.3.4 example.org\n# Blocks example.com by responding with 0.0.0.0.\n0.0.0.0 example.com\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"example.org"),": a simple domain rule.  Blocks ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," domain but\n",(0,i.kt)("strong",{parentName:"p"},"not")," its subdomains.  ",(0,i.kt)("inlineCode",{parentName:"p"},"www.example.org")," remains allowed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"! Here goes a comment")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"# Also a comment"),": comments.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"/REGEX/"),": block access to the domains matching the specified regular\nexpression"))),(0,i.kt)("h2",{id:"adblock-style-syntax"},"Adblock-Style Syntax"),(0,i.kt)("p",null,"This is a subset of the ",(0,i.kt)("a",{parentName:"p",href:"https://kb.adguard.com/en/general/how-to-create-your-own-ad-filters"},"traditional Adblock-style")," syntax which is used by\nbrowser ad blockers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},'     rule = ["@@"] pattern [ "$" modifiers ]\nmodifiers = [modifier0, modifier1[, ...[, modifierN]]]\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"pattern"),": the hostname mask.  Every hostname is matched against this mask.\nThe pattern can also contain special characters, which are described below.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@"),": the marker that is used in the exception rules.  Start your rule with\nthis marker if you want to turn off filtering for the matching hostnames.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"modifiers"),": parameters that clarify the rule.  They may limit the scope of\nthe rule or even completely change the way it works."),(0,i.kt)("h3",{parentName:"li",id:"special-characters"},"Special Characters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*"),": the wildcard character.  It is used to represent any set of characters.\nThis can also be an empty string or a string of any length.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||"),": matches the beginning of a hostname, including any subdomain.  For\ninstance, ",(0,i.kt)("inlineCode",{parentName:"p"},"||example.org")," matches ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"test.example.org")," but\nnot ",(0,i.kt)("inlineCode",{parentName:"p"},"testexample.org"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"^"),": the separator character.  Unlike browser ad blocking, there's nothing\nto separate in a hostname, so the only purpose of this character is to mark\nthe end of the hostname.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"|"),": a pointer to the beginning or the end of the hostname.  The value\ndepends on the character placement in the mask.  For example, the rule\n",(0,i.kt)("inlineCode",{parentName:"p"},"ample.org|")," corresponds to ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," but not to ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org.com"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"|example")," corresponds to ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," but not to ",(0,i.kt)("inlineCode",{parentName:"p"},"test.example"),"."),(0,i.kt)("h3",{parentName:"li",id:"regular-expressions"},"Regular Expressions"))),(0,i.kt)("p",null,"If you want even more flexibility in making rules, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},"regular\nexpressions")," instead of the default simplified matching syntax.  If you\nwant to use a regular expression, the pattern has to look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},'pattern = "/" regexp "/"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"/example.*/")," will block hosts matching the ",(0,i.kt)("inlineCode",{parentName:"p"},"example.*")," regexp.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@/example.*/$important")," will unblock hosts matching the ",(0,i.kt)("inlineCode",{parentName:"p"},"example.*"),"\nregexp.  Note that this rule also implies the ",(0,i.kt)("inlineCode",{parentName:"p"},"important")," modifier."),(0,i.kt)("h3",{parentName:"li",id:"comments"},"Comments"))),(0,i.kt)("p",null,"Any line that starts with an exclamation mark or a hash sign is a comment and it\nwill be ignored by the filtering engine.  Comments are usually placed above\nrules and used to describe what a rule does."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"! This is a comment.\n# This is also a comment.\n")),(0,i.kt)("h3",{id:"rule-modifiers"},"Rule Modifiers"),(0,i.kt)("p",null,"You can change the behavior of a rule by adding modifiers.  Modifiers must be\nlocated at the end of the rule after the ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," character and be separated by\ncommas."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.org^$important\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^")," is the matching pattern.  ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," is the delimiter, which\nsignals that the rest of the rule are modifiers.  ",(0,i.kt)("inlineCode",{parentName:"p"},"important")," is the\nmodifier.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You may want to use multiple modifiers in a rule.  Separate them by commas\nin this case:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.org^$client=127.0.0.1,dnstype=A\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^")," is the matching pattern.  ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," is the delimiter, which\nsignals that the rest of the rule are modifiers.  ",(0,i.kt)("inlineCode",{parentName:"p"},"client=127.0.0.1")," is the\n",(0,i.kt)("a",{parentName:"p",href:"#client"},(0,i.kt)("inlineCode",{parentName:"a"},"client"))," modifier with its value, ",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),", is the delimiter.\nAnd finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"dnstype=A")," is the ",(0,i.kt)("a",{parentName:"p",href:"#dnstype"},(0,i.kt)("inlineCode",{parentName:"a"},"dnstype"))," modifier with its\nvalue, ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:"),"  If a rule contains a modifier not listed in this document, the whole\nrule ",(0,i.kt)("strong",{parentName:"p"},"must be ignored"),".  This way we avoid false-positives when people are\ntrying to use unmodified browser ad blockers' filter lists like EasyList or\nEasyPrivacy."),(0,i.kt)("h4",{id:"client"},(0,i.kt)("inlineCode",{parentName:"h4"},"client")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"client")," modifier allows specifying clients this rule is applied to.  There\nare two main ways to identify a client:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By their IP address or CIDR prefix.  This way works for all kinds of\nclients.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By their name.  This way only works for persistent clients, that is clients\nwhich you have manually added on the \u201cSettings \u2192 Client settings\u201d page."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," ClientIDs are not currently supported, only names are.  If you\nhave added a client with the name \u201cMy Client\u201d and ClientID ",(0,i.kt)("inlineCode",{parentName:"p"},"my-client"),",\nspell your modifier as ",(0,i.kt)("inlineCode",{parentName:"p"},"$client='My Client'")," as opposed to\n",(0,i.kt)("inlineCode",{parentName:"p"},"$client=my-client"),"."))),(0,i.kt)("p",null,"The syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$client=value1|value2|...\n")),(0,i.kt)("p",null,"You can also exclude clients by adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"~")," character before the value.  In\nthis case, the rule is not be applied to this client's DNS requests."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$client=~value1\n")),(0,i.kt)("p",null,"Client names usually contain spaces or other special characters, which is why\nyou should enclose the name in quotes.  Both single and double ASCII quotes are\nsupported.  Use the backslash (",(0,i.kt)("inlineCode",{parentName:"p"},"\\"),") to escape quotes (",(0,i.kt)("inlineCode",{parentName:"p"},'"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},"'"),"), commas\n(",(0,i.kt)("inlineCode",{parentName:"p"},","),"), and pipes (",(0,i.kt)("inlineCode",{parentName:"p"},"|"),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," When excluding a client, you ",(0,i.kt)("strong",{parentName:"p"},"must")," keep ",(0,i.kt)("inlineCode",{parentName:"p"},"~")," out of the quotes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@||*^$client=127.0.0.1"),": unblock everything for localhost.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$client='Frank\\'s laptop'"),": block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for the\nclient named ",(0,i.kt)("inlineCode",{parentName:"p"},"Frank's laptop")," only.  Note that quote (",(0,i.kt)("inlineCode",{parentName:"p"},"'"),") in the name must\nbe escaped.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$client=~'Mary\\'s\\, John\\'s\\, and Boris\\'s laptops'"),": block\n",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for everyone except for the client named ",(0,i.kt)("inlineCode",{parentName:"p"},"Mary's, John's, and\nBoris's laptops"),".  Note that comma (",(0,i.kt)("inlineCode",{parentName:"p"},","),") must be escaped as well.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$client=~Mom|~Dad|Kids"),": block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"Kids"),", but\nnot for ",(0,i.kt)("inlineCode",{parentName:"p"},"Mom")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Dad"),".  This example demonstrates how to specify multiple\nclients in one rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$client=192.168.0.0/24"),": block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for all clients\nwith IP addresses in the range from ",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.0.0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.0.255"),"."),(0,i.kt)("h4",{parentName:"li",id:"denyallow"},(0,i.kt)("inlineCode",{parentName:"h4"},"denyallow")))),(0,i.kt)("p",null,"Available since ",(0,i.kt)("strong",{parentName:"p"},"v0.106.0"),"."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"denyallow")," modifier to exclude domains from the blocking rule.\nTo add multiple domains to one rule, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," character as a separator."),(0,i.kt)("p",null,"The syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$denyallow=domain1|domain2|...\n")),(0,i.kt)("p",null,"This modifier allows avoiding creating unnecessary exception rules when our\nblocking rule covers too many domains.  You may want to block everything save\nfor a couple of TLD domains. You could use the standard approach, i.e. rules\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"! Block everything.\n/.*/\n\n! Unblock a couple of TLDs.\n@@||com^\n@@||net^\n")),(0,i.kt)("p",null,"The problem with this approach is that this way you will also unblock tracking\ndomains that are located on those TLDs (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"google-analytics.com"),").  Here's\nhow to solve this with ",(0,i.kt)("inlineCode",{parentName:"p"},"denyallow"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"*$denyallow=com|net\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"*$denyallow=com|net"),": block everything save for ",(0,i.kt)("inlineCode",{parentName:"p"},"*.com")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"*.net"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@*$denyallow=com|net"),": unblock everything save for ",(0,i.kt)("inlineCode",{parentName:"p"},"*.com")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"*.net"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$denyallow=sub.example.org"),". block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"*.example.org")," but don't block ",(0,i.kt)("inlineCode",{parentName:"p"},"sub.example.org"),"."),(0,i.kt)("h4",{parentName:"li",id:"dnstype"},(0,i.kt)("a",{href:"#dnstype",id:"dnstype",name:"dnstype"},(0,i.kt)("inlineCode",{parentName:"h4"},"dnstype"))))),(0,i.kt)("p",null,"Available since ",(0,i.kt)("strong",{parentName:"p"},"v0.105.0"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dnstype")," modifier allows specifying DNS request or response type on which\nthis rule will be triggered."),(0,i.kt)("p",null,"The syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$dnstype=value1|value2|...\n$dnstype=~value1|~value2|~...\n")),(0,i.kt)("p",null,"The names of the types are case-insensitive, but are validated against a set of\nactual DNS resource record (RR) types."),(0,i.kt)("p",null,"Do not combine exclusion rules with inclusion ones.  This:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$dnstype=~value1|value2\n")),(0,i.kt)("p",null,"is equivalent to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$dnstype=value2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$dnstype=AAAA"),": block DNS queries for the IPv6 addresses of\n",(0,i.kt)("inlineCode",{parentName:"p"},"example.org"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$dnstype=~A|~CNAME"),": only allow ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"CNAME")," DNS queries\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org"),", block out the rest."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:")," Before version ",(0,i.kt)("strong",{parentName:"p"},"v0.108.0,")," AdGuard Home would use the type of the\nrequest to filter the response records, as opposed to the type of the response\nrecord itself.  That caused issues, since that meant that you could not write\nrules that would allow certain ",(0,i.kt)("inlineCode",{parentName:"p"},"CNAME")," records in responses in ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AAAA"),"\nrequests.  In ",(0,i.kt)("strong",{parentName:"p"},"v0.108.0")," that behaviour was changed, so now this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||canon.example.com^$dnstype=~CNAME\n")),(0,i.kt)("p",null,"allows you to avoid filtering of the following response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"ANSWERS:\n->  example.com\n    canonical name = canon.example.com.\n    ttl = 60\n->  canon.example.com\n    internet address = 1.2.3.4\n    ttl = 60\n")),(0,i.kt)("h4",{id:"dnsrewrite"},(0,i.kt)("inlineCode",{parentName:"h4"},"dnsrewrite")),(0,i.kt)("p",null,"Available since ",(0,i.kt)("strong",{parentName:"p"},"v0.105.0"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsrewrite")," response modifier allows replacing the content of the response\nto the DNS request for the matching hosts.  Rules with the ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsrewrite"),"\nresponse modifier have higher priority than other rules in AdGuard Home."),(0,i.kt)("p",null,"The shorthand syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$dnsrewrite=1.2.3.4\n$dnsrewrite=abcd::1234\n$dnsrewrite=example.net\n$dnsrewrite=REFUSED\n")),(0,i.kt)("p",null,"The keywords MUST be in all caps (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"NOERROR"),").  Keyword rewrites take\nprecedence over the other and will result in an empty response with an\nappropriate response code."),(0,i.kt)("p",null,"Before ",(0,i.kt)("strong",{parentName:"p"},"v0.107.3")," the only possible keyword is ",(0,i.kt)("inlineCode",{parentName:"p"},"REFUSED"),"."),(0,i.kt)("p",null,"Since ",(0,i.kt)("strong",{parentName:"p"},"v0.107.3")," response codes ",(0,i.kt)("inlineCode",{parentName:"p"},"NOERROR"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NXDOMAIN"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"SERVFAIL")," are also\nsupported."),(0,i.kt)("p",null,"The full syntax is of the form ",(0,i.kt)("inlineCode",{parentName:"p"},"RCODE;RRTYPE;VALUE"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$dnsrewrite=NOERROR;A;1.2.3.4\n$dnsrewrite=NOERROR;AAAA;abcd::1234\n$dnsrewrite=NOERROR;CNAME;example.net\n$dnsrewrite=REFUSED;;\n")),(0,i.kt)("p",null,"Since ",(0,i.kt)("strong",{parentName:"p"},"v0.107.3")," a ",(0,i.kt)("inlineCode",{parentName:"p"},"$dnsrewrite")," modifier with the ",(0,i.kt)("inlineCode",{parentName:"p"},"NOERROR")," response code may\nalso has empty ",(0,i.kt)("inlineCode",{parentName:"p"},"RRTYPE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VALUE")," fields."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CNAME")," one is special because AdGuard Home will resolve the host and add\nits info to the response.  That is, if ",(0,i.kt)("inlineCode",{parentName:"p"},"example.net")," has IP ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4"),", and the\nuser has this in their filter rules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.com^$dnsrewrite=example.net\n! Or:\n||example.com^$dnsrewrite=NOERROR;CNAME;example.net\n")),(0,i.kt)("p",null,"then the response will be something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ nslookup example.com my.adguard.local\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"Server:     my.adguard.local\nAddress:    127.0.0.1#53\n\nNon-authoritative answer:\nexample.com canonical name = example.net.\nName:   example.net\nAddress: 1.2.3.4\n")),(0,i.kt)("p",null,"Next, the ",(0,i.kt)("inlineCode",{parentName:"p"},"CNAME")," rewrite.  After that, all other records's values are summed as\none response, so this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.com^$dnsrewrite=NOERROR;A;1.2.3.4\n||example.com^$dnsrewrite=NOERROR;A;1.2.3.5\n")),(0,i.kt)("p",null,"will result in a response with two ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," records."),(0,i.kt)("p",null,"Currently supported RR types with examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||4.3.2.1.in-addr.arpa^$dnsrewrite=NOERROR;PTR;example.net.")," adds a ",(0,i.kt)("inlineCode",{parentName:"p"},"PTR"),"\nrecord for reverse DNS.  Reverse DNS requests for ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4")," to the\nAdGuard Home DNS server will result in ",(0,i.kt)("inlineCode",{parentName:"p"},"example.net"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," the IP MUST be in reverse order.  Before ",(0,i.kt)("strong",{parentName:"p"},"v0.106.0"),", the value\nhad to contain a final dot, but since ",(0,i.kt)("strong",{parentName:"p"},"v0.106.0")," both forms are accepted.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc1035#section-3.5"},"RFC 1035"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;A;1.2.3.4")," adds an ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," record with the\nvalue ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;AAAA;abcd::1234")," adds an ",(0,i.kt)("inlineCode",{parentName:"p"},"AAAA")," record\nwith the value ",(0,i.kt)("inlineCode",{parentName:"p"},"abcd::1234"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;CNAME;example.org")," adds a ",(0,i.kt)("inlineCode",{parentName:"p"},"CNAME")," record.\nSee explanation above.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;HTTPS;32 example.com alpn=h3")," adds an\n",(0,i.kt)("inlineCode",{parentName:"p"},"HTTPS")," record.  Only a subset of parameter values is supported: values must\nbe ",(0,i.kt)("inlineCode",{parentName:"p"},"contiguous")," and, where a ",(0,i.kt)("inlineCode",{parentName:"p"},"value-list")," is expected`, only one value is\ncurrently supported:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},'ipv4hint=127.0.0.1             // Supported.\nipv4hint="127.0.0.1"           // Unsupported.\nipv4hint=127.0.0.1,127.0.0.2   // Unsupported.\nipv4hint="127.0.0.1,127.0.0.2" // Unsupported.\n')),(0,i.kt)("p",{parentName:"li"},"This will change in the future.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;MX;32 example.mail")," adds an ",(0,i.kt)("inlineCode",{parentName:"p"},"MX")," record\nwith precedence value ",(0,i.kt)("inlineCode",{parentName:"p"},"32")," and exchange value ",(0,i.kt)("inlineCode",{parentName:"p"},"example.mail"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;SVCB;32 example.com alpn=h3")," adds and\n",(0,i.kt)("inlineCode",{parentName:"p"},"SVCB")," value.  See the ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTPS")," example above.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NOERROR;TXT;hello_world")," adds a ",(0,i.kt)("inlineCode",{parentName:"p"},"TXT")," record with\nthe value ",(0,i.kt)("inlineCode",{parentName:"p"},"hello_world"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||_svctype._tcp.example.com^$dnsrewrite=NOERROR;SRV;10 60 8080 example.com"),"\nadds an ",(0,i.kt)("inlineCode",{parentName:"p"},"SRV")," record with priority value ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),", weight value ",(0,i.kt)("inlineCode",{parentName:"p"},"60"),", port\n",(0,i.kt)("inlineCode",{parentName:"p"},"8080"),", and target value ",(0,i.kt)("inlineCode",{parentName:"p"},"example.com"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com^$dnsrewrite=NXDOMAIN;;")," responds with an ",(0,i.kt)("inlineCode",{parentName:"p"},"NXDOMAIN")," code.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"$dnstype=AAAA,denyallow=example.org,dnsrewrite=NOERROR;;")," responds with an\nempty ",(0,i.kt)("inlineCode",{parentName:"p"},"NOERROR")," answers for all ",(0,i.kt)("inlineCode",{parentName:"p"},"AAAA")," requests except the ones for\n",(0,i.kt)("inlineCode",{parentName:"p"},"example.org"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," this is available since ",(0,i.kt)("strong",{parentName:"p"},"v0.107.3"),"."))),(0,i.kt)("p",null,"Exception rules remove one or all rules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@||example.com^$dnsrewrite")," removes all DNS rewrite rules.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@||example.com^$dnsrewrite=1.2.3.4")," removes the DNS rewrite rule that adds\nan ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," record with the value ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2.3.4"),"."),(0,i.kt)("h4",{parentName:"li",id:"important"},(0,i.kt)("a",{href:"#important",id:"important",name:"important"},(0,i.kt)("inlineCode",{parentName:"h4"},"important"))))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"important")," modifier applied to a rule increases its priority over any\nother rule without the modifier.  Even over basic exception rules."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.org^$important\n@@||example.org^\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$important")," will block all requests to ",(0,i.kt)("inlineCode",{parentName:"p"},"*.example.org"),".\ndespite the exception rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In this example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-none"},"||example.org^$important\n@@||example.org^$important\n")),(0,i.kt)("p",{parentName:"li"},"  the exception rule also has the ",(0,i.kt)("inlineCode",{parentName:"p"},"important")," modifier, so it will work."),(0,i.kt)("h4",{parentName:"li",id:"badfilter"},(0,i.kt)("inlineCode",{parentName:"h4"},"badfilter")))),(0,i.kt)("p",null,"The rules with the ",(0,i.kt)("inlineCode",{parentName:"p"},"badfilter")," modifier disable other basic rules to which they\nrefer.  It means that the text of the disabled rule should match the text of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"badfilter")," rule (without the ",(0,i.kt)("inlineCode",{parentName:"p"},"badfilter")," modifier)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.com$badfilter")," disables ",(0,i.kt)("inlineCode",{parentName:"p"},"||example.com"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"@@||example.org^$badfilter")," disables ",(0,i.kt)("inlineCode",{parentName:"p"},"@@||example.org^"),"."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NOTE:"),"  The ",(0,i.kt)("inlineCode",{parentName:"p"},"badfilter")," modifier currently doesn't work with\n",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts"),"-style rules.  ",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1 example.org$badfilter")," will ",(0,i.kt)("strong",{parentName:"p"},"not"),"\ndisable the original ",(0,i.kt)("inlineCode",{parentName:"p"},"127.0.0.1 example.org")," rule."),(0,i.kt)("h4",{id:"ctag"},(0,i.kt)("inlineCode",{parentName:"h4"},"ctag")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ctag")," modifier allows to block domains only for specific types of DNS\nclient tags.  You can assign tags to clients in the AdGuard Home UI.  In the\nfuture, we plan to assign tags automatically by analyzing the behavior of each\nclient."),(0,i.kt)("p",null,"The syntax is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$ctag=value1|value2|...\n")),(0,i.kt)("p",null,"If one of client's tags matches the ",(0,i.kt)("inlineCode",{parentName:"p"},"ctag")," values, this rule applies to the\nclient.  The syntax for exclusion is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"$ctag=~value1|~value2|...\n")),(0,i.kt)("p",null,"If one of client's tags matches the exclusion ",(0,i.kt)("inlineCode",{parentName:"p"},"ctag")," values, this rule doesn't\napply to the client."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$ctag=device_pc|device_phone"),": block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for clients\ntagged as ",(0,i.kt)("inlineCode",{parentName:"p"},"device_pc")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"device_phone"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"||example.org^$ctag=~device_phone"),": block ",(0,i.kt)("inlineCode",{parentName:"p"},"example.org")," for all clients\nexcept those tagged as ",(0,i.kt)("inlineCode",{parentName:"p"},"device_phone"),"."))),(0,i.kt)("p",null,"The list of allowed tags:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By device type:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_audio"),": audio devices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_camera"),": cameras."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_gameconsole"),": game consoles."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_laptop"),": laptops,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_nas"),": NAS (Network-attached Storages)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_pc"),": PCs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_phone"),": phones."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_printer"),": printers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_securityalarm"),": security alarms."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_tablet"),": tablets."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_tv"),": TVs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"device_other"),": other devices."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By operating system:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_android"),": Android."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_ios"),": iOS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_linux"),": Linux."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_macos"),": macOS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_windows"),": Windows."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"os_other"),": other OSes."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"By user group:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_admin"),": administrators."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_regular"),": regular users."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_child"),": children.")))),(0,i.kt)("h2",{id:"etc-hosts-syntax"},(0,i.kt)("inlineCode",{parentName:"h2"},"/etc/hosts"),"-Style Syntax"),(0,i.kt)("p",null,"For each host a single line should be present with the following information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"IP_address canonical_hostname [aliases...]\n")),(0,i.kt)("p",null,"Fields of the entries are separated by any number of space or tab characters.\nText from the ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," character until the end of the line is a comment and is\nignored."),(0,i.kt)("p",null,"Hostnames may contain only alphanumeric characters, hyphen-minus signs (",(0,i.kt)("inlineCode",{parentName:"p"},"-"),"),\nand periods (",(0,i.kt)("inlineCode",{parentName:"p"},"."),").  They must begin with an alphabetic character and end with an\nalphanumeric character.  Optional aliases provide for name changes, alternate\nspellings, shorter hostnames, or generic hostnames (for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost"),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"# This is a comment\n127.0.0.1 example.org example.info\n127.0.0.1 example.com\n127.0.0.1 example.net # this is also a comment\n")),(0,i.kt)("p",null,"The IP addresses are used to respond to the DNS queries for these domains."),(0,i.kt)("h2",{id:"domains-only-syntax"},"Domains-Only Syntax"),(0,i.kt)("p",null,"A simple list of domain names, one name per line."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"# This is a comment\nexample.com\nexample.org\nexample.net # this is also a comment\n")),(0,i.kt)("p",null,"If a string is not a valid domain (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"*.example.org"),"), AdGuard Home will\nconsider it to be an ",(0,i.kt)("a",{parentName:"p",href:"#adblock-style-syntax"},"Adblock-style")," rule."),(0,i.kt)("h2",{id:"hostlists-compiler"},"Hostlists Compiler"),(0,i.kt)("p",null,"If you are maintaining a blocklist and use different sources in it, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AdguardTeam/HostlistCompiler"},"Hostlists\ncompiler")," may be useful to you.  It is a simple tool that makes it easier\nto compile a hosts blocklist compatible with AdGuard Home or any other AdGuard\nproduct with DNS filtering."),(0,i.kt)("p",null,"What it's capable of:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Compile a single blocklist from multiple sources.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Exclude the rules you don't need.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cleanup the resulting list: deduplicate, remove invalid rules, and compress\nthe list."))))}k.isMDXComponent=!0}}]);